{
	"info": {
		"_postman_id": "e433f009-144f-42f3-af35-d36d325954ad",
		"name": "Blazor CRUD API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15929802"
	},
	"item": [
		{
			"name": "Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data is present\"), function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(!(jsonData).to.be.empty);\r",
							"}\r",
							"\r",
							"pm.test(\"Response body contains correct keys\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
							"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
							"})\r",
							"\r",
							"pm.test(\"Data type of the response is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData[0].firstName).to.be.a(\"string\");\r",
							"    pm.expect(jsonData[0].lastName).to.be.a(\"string\");\r",
							"    pm.expect(jsonData[0].age).to.be.a(\"number\");\r",
							"    pm.expect(jsonData[0].gender).to.be.a(\"number\");\r",
							"    pm.expect(jsonData[0].phoneNumber).to.be.a(\"string\");\r",
							"    pm.expect(jsonData[0].email).to.be.a(\"string\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{base_url}}/person",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "Correct Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"FirstName\":\"Jonathan\",\r\n    \"LastName\":\"Stillwell\",\r\n    \"Gender\":0,\r\n    \"Age\":15,\r\n    \"PhoneNumber\":\"1233452424\",\r\n    \"Email\":\"a@aa.aa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{base_url}}/person",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "Name not provided",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Not providing a first name throws an error\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Please enter a first name\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"LastName\":\"Stillwell\",\r\n    \"Gender\":0,\r\n    \"Age\":15,\r\n    \"PhoneNumber\":\"1233452424\",\r\n    \"Email\":\"a@aa.aa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{base_url}}/person",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "Last name not provided",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Not providing a last name throws an error\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Please provide a last name\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"FirstName\":\"Jonathan\",\r\n    \"Gender\":0,\r\n    \"Age\":15,\r\n    \"PhoneNumber\":\"1233452424\",\r\n    \"Email\":\"a@aa.aa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{base_url}}/person",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "Incorrect age",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Not providing a correct age throws an error\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Please choose a correct age\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"FirstName\":\"Jonathan\",\r\n    \"LastName\":\"Stillwell\",\r\n    \"Gender\":0,\r\n    \"Age\":-3,\r\n    \"PhoneNumber\":\"1233452424\",\r\n    \"Email\":\"a@aa.aa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{base_url}}/person",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "Incorrect email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Not providing a valid e-mail throws an error\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"The Email field is not a valid e-mail address.\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"FirstName\":\"Jonathan\",\r\n    \"LastName\":\"Stillwell\",\r\n    \"Gender\":0,\r\n    \"Age\":15,\r\n    \"PhoneNumber\":\"1233452424\",\r\n    \"Email\":\"abc\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{base_url}}/person",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "No phone number provided",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Not providing a phone number throws an error\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"You must provide a phone number\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"FirstName\":\"Jonathan\",\r\n    \"LastName\":\"Stillwell\",\r\n    \"Gender\":0,\r\n    \"Age\":15,\r\n    \"PhoneNumber\":null,\r\n    \"Email\":\"a@aa.aa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{base_url}}/person",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person"
					]
				}
			},
			"response": []
		},
		{
			"name": "Correct Put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Entity has changed\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"ChangedJoe\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ChangedWalsh\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Changed0048125629349\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Changedjoe23@gmail.com\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2,\r\n    \"firstName\": \"ChangedJoe\",\r\n    \"lastName\": \"ChangedWalsh\",\r\n    \"gender\": 1,\r\n    \"age\": 32,\r\n    \"phoneNumber\": \"Changed0048125629349\",\r\n    \"email\": \"Changedjoe23@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{base_url}}/person/2",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Entity has been deleted\", function () {\r",
							"    pm.expect(!pm.response.text()).to.include(\"ChangedJoe\");\r",
							"    pm.expect(!pm.response.text()).to.include(\"ChangedWalsh\");\r",
							"    pm.expect(!pm.response.text()).to.include(\"Changed0048125629349\");\r",
							"    pm.expect(!pm.response.text()).to.include(\"Changedjoe23@gmail.com\");\r",
							"})\r",
							"\r",
							"pm.test(\"Deleting a non-existent ID does not work\", function () {\r",
							"    pm.sendRequest({\r",
							"        url: 'https://localhost:7160/api/person/281471284712847128472',\r",
							"        method: 'DELETE'\r",
							"    }, function (err, response) {\r",
							"        pm.response.to.have.status(400);\r",
							"        pm.expect(pm.response.text()).to.include(\"Incorrect person ID\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{base_url}}/person/2",
					"protocol": "https",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"person",
						"2"
					]
				}
			},
			"response": []
		}
	]
}